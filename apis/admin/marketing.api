syntax = "v1"

info (
	title:   "Marketing API"
	desc:    "API for ppanel"
	author:  "Tension"
	email:   "tension@ppanel.com"
	version: "0.0.1"
)

type (
	CreateBatchSendEmailTaskRequest {
		Subject           string `json:"subject"`
		Content           string `json:"content"`
		Scope             int8   `json:"scope"`
		RegisterStartTime int64  `json:"register_start_time,omitempty"`
		RegisterEndTime   int64  `json:"register_end_time,omitempty"`
		Additional        string `json:"additional,omitempty"`
		Scheduled         int64  `json:"scheduled,omitempty"`
		Interval          uint8  `json:"interval,omitempty"`
		Limit             uint64 `json:"limit,omitempty"`
	}
	BatchSendEmailTask {
		Id                int64  `json:"id"`
		Subject           string `json:"subject"`
		Content           string `json:"content"`
		Recipients        string `json:"recipients"`
		Scope             int8   `json:"scope"`
		RegisterStartTime int64  `json:"register_start_time"`
		RegisterEndTime   int64  `json:"register_end_time"`
		Additional        string `json:"additional"`
		Scheduled         int64  `json:"scheduled"`
		Interval          uint8  `json:"interval"`
		Limit             uint64 `json:"limit"`
		Status            uint8  `json:"status"`
		Errors            string `json:"errors"`
		Total             uint64 `json:"total"`
		Current           uint64 `json:"current"`
		CreatedAt         int64  `json:"created_at"`
		UpdatedAt         int64  `json:"updated_at"`
	}
	GetBatchSendEmailTaskListRequest {
		Page   int    `form:"page"`
		Size   int    `form:"size"`
		Scope  *int8  `form:"scope,omitempty"`
		Status *uint8 `form:"status,omitempty"`
	}
	GetBatchSendEmailTaskListResponse {
		Total int64                `json:"total"`
		List  []BatchSendEmailTask `json:"list"`
	}
	StopBatchSendEmailTaskRequest {
		Id int64 `json:"id"`
	}
	GetPreSendEmailCountRequest {
		Scope             string `json:"scope"`
		RegisterStartTime int64  `json:"register_start_time,omitempty"`
		RegisterEndTime   int64  `json:"register_end_time,omitempty"`
	}
	GetPreSendEmailCountResponse {
		Count int64 `json:"count"`
	}
	GetBatchSendEmailTaskStatusRequest {
		Id int64 `json:"id"`
	}
	GetBatchSendEmailTaskStatusResponse {
		Status  uint8  `json:"status"`
		Current int64  `json:"current"`
		Total   int64  `json:"total"`
		Errors  string `json:"errors"`
	}
	CreateQuotaTaskRequest {
		Scope             int8   `json:"scope"`
		RegisterStartTime int64  `json:"register_start_time"`
		RegisterEndTime   int64  `json:"register_end_time"`
		QuotaType         uint8  `json:"quota_type"`
		Days              uint64 `json:"days"` // Number of days for the quota
		Gift              uint8  `json:"gift"` // Invoice amount ratio(%) to gift amount for quota
	}
	QuotaTask {
		Id                int64   `json:"id"`
		Scope             int8    `json:"scope"`
		RegisterStartTime int64   `json:"register_start_time"`
		RegisterEndTime   int64   `json:"register_end_time"`
		QuotaType         uint8   `json:"quota_type"`
		Days              uint64  `json:"days"` // Number of days for the quota
		Gift              uint8   `json:"gift"` // Invoice amount ratio(%) to gift
		Recipients        []int64 `json:"recipients"` // UserSubscribe IDs of recipients
		Status            uint8   `json:"status"`
		Total             int64   `json:"total"`
		Current           int64   `json:"current"`
		Errors            string  `json:"errors"`
		CreatedAt         int64   `json:"created_at"`
		UpdatedAt         int64   `json:"updated_at"`
	}
	QueryQuotaTaskPreCountRequest {
		Scope             uint8 `json:"scope"`
		RegisterStartTime int64 `json:"register_start_time"`
		RegisterEndTime   int64 `json:"register_end_time"`
	}
	QueryQuotaTaskPreCountResponse {
		Count int64 `json:"count"`
	}
	QueryQuotaTaskListRequest {
		Page   int    `form:"page"`
		Size   int    `form:"size"`
		Scope  *uint8 `form:"scope,omitempty"`
		Status *uint8 `form:"status,omitempty"`
	}
	QueryQuotaTaskListResponse {
		Total int64       `json:"total"`
		List  []QuotaTask `json:"list"`
	}
	QueryQuotaTaskStatusRequest {
		Id int64 `json:"id"`
	}
	QueryQuotaTaskStatusResponse {
		Status  uint8  `json:"status"`
		Current int64  `json:"current"`
		Total   int64  `json:"total"`
		Errors  string `json:"errors"`
	}
)

@server (
	prefix:     v1/admin/marketing
	group:      admin/marketing
	middleware: AuthMiddleware
)
service ppanel {
	@doc "Create a batch send email task"
	@handler CreateBatchSendEmailTask
	post /email/batch/send (CreateBatchSendEmailTaskRequest)

	@doc "Get batch send email task list"
	@handler GetBatchSendEmailTaskList
	get /email/batch/list (GetBatchSendEmailTaskListRequest) returns (GetBatchSendEmailTaskListResponse)

	@doc "Stop a batch send email task"
	@handler StopBatchSendEmailTask
	post /email/batch/stop (StopBatchSendEmailTaskRequest)

	@doc "Get pre-send email count"
	@handler GetPreSendEmailCount
	post /email/batch/pre-send-count (GetPreSendEmailCountRequest) returns (GetPreSendEmailCountResponse)

	@doc "Get batch send email task status"
	@handler GetBatchSendEmailTaskStatus
	post /email/batch/status (GetBatchSendEmailTaskStatusRequest) returns (GetBatchSendEmailTaskStatusResponse)

	@doc "Create a quota task"
	@handler CreateQuotaTask
	post /quota/create (CreateQuotaTaskRequest)

	@doc "Query quota task pre-count"
	@handler QueryQuotaTaskPreCount
	post /quota/pre-count (QueryQuotaTaskPreCountRequest) returns (QueryQuotaTaskPreCountResponse)

	@doc "Query quota task list"
	@handler QueryQuotaTaskList
	get /quota/list (QueryQuotaTaskListRequest) returns (QueryQuotaTaskListResponse)

	@doc "Query quota task status"
	@handler QueryQuotaTaskStatus
	post /quota/status (QueryQuotaTaskStatusRequest) returns (QueryQuotaTaskStatusResponse)
}

